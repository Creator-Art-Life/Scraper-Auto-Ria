#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_phone_from_ria
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π AUTO.RIA
"""

import asyncio
import aiohttp
import sys
import os
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é scraper
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.scraper_core import get_phone_from_ria
from config import Config

# –¢–µ—Å—Ç–æ–≤—ã–µ URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π AUTO.RIA (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
TEST_URLS = [
    "https://auto.ria.com/uk/newauto/auto-renault-taliant-1999075.html",
    "https://auto.ria.com/uk/auto_audi_s5_38256694.html", 
    "https://auto.ria.com/uk/auto_audi_a4_38444076.html",
    "https://auto.ria.com/uk/auto_volkswagen_tiguan_38442747.html",
    "https://auto.ria.com/uk/auto_audi_a4_38444044.html"
]

async def test_single_phone_extraction(session: aiohttp.ClientSession, url: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
    
    try:
        phones = await get_phone_from_ria(session, url)
        
        result = {
            "url": url,
            "success": True,
            "phones": phones,
            "phone_count": len(phones),
            "error": None
        }
        
        if phones:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(phones)}")
            for i, phone in enumerate(phones, 1):
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω {i}: {phone}")
        else:
            print("‚ö†Ô∏è  –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        return {
            "url": url,
            "success": False,
            "phones": [],
            "phone_count": 0,
            "error": str(e)
        }

async def test_phone_extraction_batch():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–∞–∫–µ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL: {len(TEST_URLS)}")
    print("-" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Å—Å–∏–∏
    timeout = aiohttp.ClientTimeout(
        total=Config.CONNECTION_TIMEOUT,
        connect=Config.CONNECT_TIMEOUT
    )
    
    connector = aiohttp.TCPConnector(
        limit=Config.CONNECTION_LIMIT,
        limit_per_host=Config.CONNECTION_LIMIT_PER_HOST,
        ttl_dns_cache=300,
        use_dns_cache=True,
    )
    
    results = []
    
    async with aiohttp.ClientSession(
        connector=connector,
        timeout=timeout,
        headers=Config.COMMON_HEADERS
    ) as session:
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π URL
        for i, url in enumerate(TEST_URLS, 1):
            print(f"\nüìã –¢–µ—Å—Ç {i}/{len(TEST_URLS)}")
            result = await test_single_phone_extraction(session, url)
            results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(TEST_URLS):
                print(f"‚è≥ –ü–∞—É–∑–∞ {Config.BATCH_DELAY} —Å–µ–∫...")
                await asyncio.sleep(Config.BATCH_DELAY)
    
    return results

def print_test_summary(results: List[dict]):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    total_tests = len(results)
    successful_tests = sum(1 for r in results if r["success"])
    failed_tests = total_tests - successful_tests
    total_phones = sum(r["phone_count"] for r in results)
    
    print(f"üî¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
    print(f"üìû –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {total_phones}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
    
    if total_phones > 0:
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {total_phones/successful_tests:.1f}")
    
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 60)
    
    for i, result in enumerate(results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        phone_info = f"({result['phone_count']} —Ç–µ–ª.)" if result["success"] else f"(–û—à–∏–±–∫–∞: {result['error']})"
        print(f"{status} –¢–µ—Å—Ç {i}: {phone_info}")
        
        if result["success"] and result["phones"]:
            for phone in result["phones"]:
                print(f"    üìû {phone}")
    
    print("\n" + "=" * 60)

async def test_with_custom_url():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º URL"""
    print("\nüîß –¢–ï–°–¢ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú URL")
    print("-" * 40)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    custom_url = input("–í–≤–µ–¥–∏—Ç–µ URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not custom_url:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º URL")
        return
    
    timeout = aiohttp.ClientTimeout(
        total=Config.CONNECTION_TIMEOUT,
        connect=Config.CONNECT_TIMEOUT
    )
    
    connector = aiohttp.TCPConnector(
        limit=Config.CONNECTION_LIMIT,
        limit_per_host=Config.CONNECTION_LIMIT_PER_HOST,
    )
    
    async with aiohttp.ClientSession(
        connector=connector,
        timeout=timeout,
        headers=Config.COMMON_HEADERS
    ) as session:
        
        result = await test_single_phone_extraction(session, custom_url)
        print_test_summary([result])

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–õ–ï–§–û–ù–û–í –ò–ó AUTO.RIA")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = await test_phone_extraction_batch()
        print_test_summary(results)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º URL
        await test_with_custom_url()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    asyncio.run(main()) 