import asyncio
import aiohttp
from scraper.core.scraper_core import parse_ad_page, fetch_html_with_aiohttp
from scraper.config import Config

async def test_newauto_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_url = "https://auto.ria.com/uk/newauto/auto-peugeot-2008-2000775.html"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ newauto: {test_url}")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
    timeout = aiohttp.ClientTimeout(
        total=Config.CONNECTION_TIMEOUT,
        connect=Config.CONNECT_TIMEOUT
    )
    
    connector = aiohttp.TCPConnector(
        limit=Config.CONNECTION_LIMIT,
        limit_per_host=Config.CONNECTION_LIMIT_PER_HOST
    )
    
    async with aiohttp.ClientSession(
        timeout=timeout,
        connector=connector
    ) as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            html_content = await fetch_html_with_aiohttp(session, test_url)
            
            if not html_content:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return
            
            print(f"‚úÖ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
            ad_data = await parse_ad_page(test_url, html_content, session)
            
            if ad_data:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
                print("-" * 40)
                for key, value in ad_data.items():
                    print(f"{key.replace('_', ' ').title()}: {value}")
                print("-" * 40)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                checks = [
                    ("Title", ad_data.get("title")),
                    ("Price USD", ad_data.get("price_usd")),
                    ("Username", ad_data.get("username")),
                    ("Image URL", ad_data.get("image_url")),
                    ("Images Count", ad_data.get("images_count"))
                ]
                
                print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π:")
                for field_name, field_value in checks:
                    status = "‚úÖ" if field_value is not None else "‚ùå"
                    print(f"{status} {field_name}: {'OK' if field_value else 'Missing'}")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_newauto_parsing()) 