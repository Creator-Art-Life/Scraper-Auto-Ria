#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é scraper
sys.path.append(os.path.join(os.path.dirname(__file__), 'scraper'))

from scraper.database.db_operations import connect_db, connect_db_async, save_data_to_postgresql_async, get_existing_ad_urls_async

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ Testing database connection...")
    
    # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("1. Testing synchronous connection...")
    conn = connect_db()
    if conn:
        conn.close()
        print("‚úÖ Synchronous connection successful!")
    else:
        print("‚ùå Synchronous connection failed!")
        return False
    
    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("2. Testing asynchronous connection...")
    conn_async = await connect_db_async()
    if conn_async:
        await conn_async.close()
        print("‚úÖ Asynchronous connection successful!")
    else:
        print("‚ùå Asynchronous connection failed!")
        return False
    
    return True

async def test_data_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ Testing data operations...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö URL
    print("1. Testing get_existing_ad_urls_async...")
    try:
        existing_urls = await get_existing_ad_urls_async()
        print(f"‚úÖ Successfully retrieved {len(existing_urls)} existing URLs")
    except Exception as e:
        print(f"‚ùå Error retrieving existing URLs: {e}")
        return False
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("2. Testing save_data_to_postgresql_async...")
    test_data = [{
        "url": f"https://test.example.com/test_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
        "title": "Test Car",
        "price_usd": 10000,
        "odometer": 50000,
        "username": "Test User",
        "phone_number": 1234567890,
        "image_url": "https://test.example.com/image.jpg",
        "images_count": 10,
        "car_number": "AA1234BB",
        "car_vin": "1HGBH41JXMN109186"
    }]
    
    try:
        await save_data_to_postgresql_async(test_data)
        print("‚úÖ Successfully saved test data to database")
    except Exception as e:
        print(f"‚ùå Error saving test data: {e}")
        return False
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting database connection and operations test...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await test_database_connection()
    if not connection_ok:
        print("‚ùå Database connection test failed!")
        return
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    operations_ok = await test_data_operations()
    if not operations_ok:
        print("‚ùå Data operations test failed!")
        return
    
    print("\n‚úÖ All database tests passed successfully!")
    print("üéâ Your database is ready for the async scraper!")

if __name__ == "__main__":
    asyncio.run(main()) 